#pragma once

#include "XMLElement.hpp"

/*! 
*@class XMLTree
*@brief This class takes care of performing basic operations. 
*It also contains the function that supports the unique identifiers.
*/

class XMLTree {

private:

    XMLElement root; /*!<The root of the tree*/

    /*!
    * @brief Overloaded stream insertion operator for XMLTree objects.
    * 
    * This function allows XMLTree objects to be printed using the output stream.
    *
    * @param os The output stream.
    * @param tree The XMLTree object to be printed.
    * @return Reference to the output stream.
    */
    friend std::ostream &operator<< (std::ostream &os, const XMLTree &tree);

public:

    XMLTree() = default;

    /*!
    * @brief Constructs an XMLTree object with a given root element.
    * 
    * @param _root The root element of the XMLTree.
    */
    XMLTree(XMLElement& _root);

    /*!
    * @brief Copy constructor for XMLTree objects.
    * 
    * @param tree The XMLTree object to be copied.
    */
    XMLTree(const XMLTree &tree);

    /*!
    *@brief Returns the root element of the XMLTreee
    *
    *@return The root element of the XMLTree
    */
    XMLElement getRoot() const; 

    /*!
    * @brief Assignment operator for XMLTree objects.
    * 
    * @param tree The XMLTree object to be assigned.
    * @return Reference to the assigned XMLTree object.
    */
    XMLTree &operator= (const XMLTree& tree);

    /*!
    * @brief Generates unique IDs for each element in the XMLTree.
    * 
    * If the element has an “id” field and its value is unique for all elements in the file, this value is used.
    * If the element has an "id" field, but its value is not unique, then a character string is concatenated to this id, which makes it unique.
    * If the element does not have an “id” field, a unique identifier generated by the program is appended to it.
    * 
    */
    void UniqueID();

    /*!
    * @brief Selects and prints the value of an attribute for a given ID.
    * 
    * This function selects an element with the specified ID and retrieves the value of the given attribute.
    * If the attribute or the ID is not found, it throws an exception.
    *
    * @param id The ID of the element.
    * @param key The attribute to retrieve the value from.
    */
    void select(const std::string &id, const std::string &key) const;

    /*!
    * @brief Sets the value of an attribute for a given ID.
    * 
    * This function sets the value of the specified attribute for the element with the given ID.
    *
    * @param id The ID of the element.
    * @param key The attribute to set the value for.
    * @param value The new value for the attribute.
    */
    void set(const std::string &id, const std::string &key, const std::string &value);
    
    /*!
    * @brief Prints the attributes of the children of an element with a given ID.
    * 
    * This function finds the element with the specified ID and prints the attributes of its children.
    *
    * @param id The ID of the element.
    */
    void children(const std::string &id) const;

    /*!
    * @brief Prints the nth child of an element with a given ID.
    * 
    * This function finds the element with the specified ID and prints the nth child's identifier.
    * If the child does not exist, it throws an exception.
    *
    * @param id The ID of the element.
    * @param n The index of the child to retrieve.
    */
    void child(const std::string &id, int n) const;

    /*!
    * @brief Prints the text content of an element with a given ID.
    * 
    * This function finds the element with the specified ID and prints its text content.
    *
    * @param id The ID of the element.
    */
    void text(const std::string &id) const;

    /*!
    * @brief Deletes an attribute with a given key from elements with a given ID.
    * 
    * This function deletes the attribute with the specified key from the elements with the given ID.
    * If the key is "id", it throws an exception (ID cannot be deleted).
    *
    * @param id The ID of the elements.
    * @param key The attribute to delete.
    */
    void deleteA(const std::string &id, const std::string &key);

    /*!
    * @brief Adds a new child element to the element with the given ID.
    *
    * @param id The ID of the element.
    */
    void newChild(const std::string &id);

    /*!
    * @brief Executes an XPath query on the XMLTree.
    * 
    * This function displays the supported XPath queries and prompts the user to choose a query number.
    * It then takes the user's input for the query and executes it on the XMLTree's root element.
    */
    void xpath() const;

};